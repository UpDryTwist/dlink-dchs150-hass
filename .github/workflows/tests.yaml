# Regular tests
#
# Ensure tests are passing on every push and PR (skipped on pushes which only
# affect documentation, although that might or might not be cool).
#
# Need to run on oldest and newest (at least) versions of Python supported.

name: tests

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    timeout-minutes: 45
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ "3.11", "3.12" ]
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    steps:

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Cache $HOME/.local # Significantly speeds up Poetry Install
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{matrix.python-version}}-${{ hashFiles('.github/workflows/tests.yaml') }}

      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: false # Currently there seems to be some race-condition in windows

      - name: Cache the dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: .venv
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      - name: Install libraries
        run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'

      - name: Now install our stuff
        run: poetry install --no-interaction

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit/
          key: pre-commit-4|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Pre-commit run
        run: poetry run pre-commit run --all-files --show-diff-on-failure --color=always

      - name: Check tests folder existence
        id: check_test_files
        uses: andstor/file-existence-action@v3
        with:
          files: "tests"

      - name: Run tests
        if: steps.check_test_files.outputs.files_exists == 'true'
        run: poetry run pytest

#      - name: Run tests
#        if: steps.check_test_files.outputs.files_exists == 'true'
#        run: |
#          source ${{ env.ACTIVATE_PYTHON_VENV }}
#          coverage run -m pytest --cov-report term --cov-report xml --junitxml=testresults.xml
#          coverage report
#
#      - name: Upload coverage to Codecov
#        if: steps.check_test_files.outputs.files_exists == 'true'
#        uses: codecov/codecov-action@v5
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          flags: unittests
#          env_vars: OS,PYTHON
#          name: Python ${{ matrix.python-version }} on ${{ runner.os }}
#
      #----------------------------------------------
      #            make sure docs build
      #----------------------------------------------
#      - name: Build HTML docs
#        run: |
#          source ${{ env.ACTIVATE_PYTHON_VENV }}
#          sphinx-build -b html docs/ docs/build/html
